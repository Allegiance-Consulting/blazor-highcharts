@page "/pie-chart"
@inject IChartService chartService
@inject IJSRuntime jsRuntime
@using Allegiance.Blazor.Highcharts.Constants

<h3>Styled Pie Chart</h3>

<figure class="highcharts-figure">
    <div id="piechart"></div>
</figure>

<h4>Code Example</h4>
<pre class="prettyprint opacity-load">
@@code {
    private PieChart PieChart = new PieChart()
    {
        Chart = new Chart(null, true),
        Tooltip = new Tooltip(false),
        Legend = new Legend(true),
        PlotOptions = new PlotOptions()
        {
            Pie = new Pie()
            {
                AllowPointSelect = false,
                ShowInLegend = true,
                Cursor = CursorType.Pointer,
                DataLabels = new Labels(false),
                States = new States(new Hover(false)),
            },
            Series = null
        },
        Title = new Title("Pie point css"),
        Series = new List&lt;SeriesElement>()
        {
            new SeriesElement()
            {
                Type = ChartType.Pie,
                Data = new List&lt;object>()
                {
                    {new List&lt;object>(){"Consumption", 29.9 } },
                    {new List&lt;object>(){"Consumption",71.5 } },
                    {new List&lt;object>(){"Consumption",106.4 } }
                }
            }
        }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("piechart", PieChart.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
</pre>


<style>

    .highcharts-pie-series .highcharts-point {
        stroke: #EDE;
        stroke-width: 2px;
    }

    .highcharts-pie-series .highcharts-data-label-connector {
        stroke: silver;
        stroke-dasharray: 2, 2;
        stroke-width: 2px;
    }

    .highcharts-figure, .highcharts-data-table table {
        min-width: 320px;
        max-width: 600px;
        margin: 1em auto;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #EBEBEB;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 600;
        padding: 0.5em;
    }

    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }
</style>

@code {

    private PieChart PieChart = new PieChart()
    {
        Chart = new Chart(null, true),
        Tooltip = new Tooltip(false),
        Legend = new Legend(true),
        PlotOptions = new PlotOptions()
        {
            Pie = new Pie()
            {
                AllowPointSelect = false,
                ShowInLegend = true,
                Cursor = CursorType.Pointer,
                DataLabels = new Labels(false),
                States = new States(new Hover(false)),
            },
            Series = null
        },
        Title = new Title("Pie point css"),
        Series = new List<SeriesElement>()
{
            new SeriesElement()
            {
                Type = ChartType.Pie,
                Data = new List<object>()
                {
                    {new List<object>(){"Consumption", 29.9 } },
                    {new List<object>(){"Consumption",71.5 } },
                    {new List<object>(){"Consumption",106.4 } }
                }

            }
        }


    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("piechart", PieChart.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
