@page "/combo-chart"
@inject IChartService chartService
@inject IJSRuntime jsRuntime
<h3>Combo Example</h3>

<div id="combo-chart"></div>

<h4>Code Example</h4>
<pre class="prettyprint opacity-load">
@@code {
    public static string primaryRed = "red";
    public static string primary5 = "cadetblue";

    private ChartObject ComboChart = new ChartObject()
    {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Combo Chart"),
        XAxis = new XAxis()
        {
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List&lt;Line>()
            {
                new Line()
                {
                Color = primaryRed,
                DashStyle = DashStyle.Longdashdot,
                Value = 7,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "&lt;span style=\"font-weight: normal; color: " + primaryRed + " ; font-size: 14px; letter-spacing: normal;\">Plot Line&lt;/span>"
                },
                Id = "PlotLine"
                }
            }
        },
        Tooltip = new Tooltip()
        {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
        },
        PlotOptions = new PlotOptions()
        {
            Area = new Area()
            {
                Stacking = Stacking.Normal
            },
            Line = new Line()
            {
                Marker = new Marker(false)
            },
            Series = new PlotOptionsSeries()
            {
                Label = new Label() { Enabled = false },
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
            }
        },

        Series = new List&lt;SeriesElement>()
    {
            new SeriesElement()
            {
                Name= "Area",
                Data= new List&lt;object>() { 5371268, 5316387, 5261641, 5207028, 5152546, 5098196, 5043975, 4989882, 4935917, 4882077, 4828362, 4774769 },
                Color= primary5,
                Marker=new Marker(false)
            },
            new SeriesElement()
            {
                Type= ChartType.Spline,
                Name= "Spline",
                Data= new List&lt;object>() { 2400019, 2388393, 2376824, 2365311, 2353853, 2342451, 2331105, 2319813, 2308576, 2297393, 2286264, 2275190 },
                LineWidth= 3,
                LineColor= primaryRed,
                Color= primaryRed,
                Marker=new Marker()
                {
                    LineWidth= 3,
                    LineColor= primaryRed,
                    FillColor= "black"
                },
            }
        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons()
            {
                ContextButton = new ContextButton(false)
            },
            SourceWidth = 900,
            SourceHeight = 350,
            ChartOptions = new ChartOptions()
            {
                Subtitle = null
            }
        }

    };


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("combo-chart", ComboChart.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
</pre>

@code {
    public static string primaryRed = "red";
    public static string primary5 = "cadetblue";

    private ChartObject ComboChart = new ChartObject()
        {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Combo Chart"),
        XAxis = new XAxis()
            {
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List<PlotLine>()
        {
                new PlotLine()
                {
                Color = primaryRed,
                DashStyle = DashStyle.Longdashdot,
                Value = 7,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "<span style=\"font-weight: normal; color: " + primaryRed + "; font-size: 14px; letter-spacing: normal;\">Plot Line</span>"
                },
                Id = "PlotLine"
                }
            }
            },
        Tooltip = new Tooltip()
            {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
            },
        PlotOptions = new PlotOptions()
            {
            Area = new PlotOptionsArea()
                {
                Stacking = Stacking.Normal
                },
            Series = new PlotOptionsSeries()
                {
                Label = new Label() { Enabled = false },
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
                }
            },

        Series = new List<SeriesElement>()
{
            new SeriesElement()
            {
                Name= "Area",
                Data= new List<object>() {571235.9051,911243.123,324856.7979,1094277.761,63180.88556,385938.4935,1918850.029,1078881.721,1861247.584,406054.6449,1239306.819,1962663.505,1213862.935,1030102.001,1100707.616,609533.3571,128745.1575,387989.0715,1542399.707,1822012.806,149368.0009,753744.2086,1007774.895,1223855.994,1915853.082,698134.8384,448756.7755,94180.48897,1498614.566,627396.5605,1414253.178,1468110.082,1986263.442,922489.2653,542556.5132,758384.9212,1451854.966,363999.5941,1301502.632,1654348.072,1126642.573,1561012.57,1306528.153,1119169.618,378078.4783,1697978.552,95592.88569,1933124.307,1918880.263,1071803.858,1851262.762,1420189.659,1566559.925,612097.9681,234077.5589,747186.6027,1827890.88,860711.9072,227653.9818,499136.4352,1600366.138,732406.7176,694804.8035,1111461.695,1362778.467,786692.9544,1205281.439,1179111.869,369633.0487,711586.4837,1619576.265,664646.9503,1569178.813,253227.8191,899548.6709,1591766.086,1232425.702,921016.0359,665467.3424,1937721.372,1610590.571,456111.4385,1130388.845,1127509.515,330993.9722,1271863.865,216621.3572,1784687.797,1696508.491,1857926.899,895350.0909,208113.3811},
                Color= primary5,
                Marker=new Marker(false)
            },
            new SeriesElement()
            {
                Type= ChartType.Spline,
                Name= "Spline",
                Data= new List<object>() { 320112.2032,1614436.669,2956780.407,1674446.955,950647.336,355189.3009,2400410.329,802365.7154,1686401.705,979422.693,1470961.315,863234.2752,2011330.762,1974658.413,1648728.083,1211066.015,2460686.144,2430876.971,2919547.021,600914.1046,2865364.689,498410.1414,2536980.953,600431.7293,2473791.306,18331.30461,2325170.423,502012.1157,2116517.593,991055.9059,811617.6276,1004275.01,681084.9899,897525.9891,2496024.387,477567.6844,984033.958,1417625.406,1740017.059,2892794.658,415030.6521,1839497.181,2910051.21,1476290.561,1484915.168,2421206.76,1522002.434,2855597.072,2635063.764,152718.0547,1220907.297,1881906.316,2359791.186,771424.7053,2483031.452,1454577.325,2856607.504,2508499.093,1949902.844,1531534.776,1050977.562,1886099.012,2295157.745,2086505.302,1942819.401,2946991.324,1485009.071,2069944.685,1791311.086,578428.5737,221857.5387,445160.2782,2692664.467,1091136.684,258026.8643,2104528.413,612357.9343,2932043.951,1132814.309,922857.0532,908907.1283,345908.6784,721011.1382,1375841.268,2830588.627,956271.7825,1784755.608,1041208.457,1379616.887,1610187.313,1493044.204,1908547.742 },
                LineWidth= 3,
                LineColor= primaryRed,
                Color= primaryRed,
                Marker=new Marker()
                {
                    LineWidth= 3,
                    LineColor= primaryRed,
                    FillColor= "black"
                },
            }
        },
        Exporting = new Exporting()
            {
            Buttons = new Buttons()
                {
                ContextButton = new ContextButton(false)
                },
            SourceWidth = 900,
            SourceHeight = 350,
            ChartOptions = new ChartOptions()
                {
                Subtitle = null
                }
            }

        };


    protected override void OnAfterRender(bool firstRender)
        {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("combo-chart", ComboChart.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
        }

}
