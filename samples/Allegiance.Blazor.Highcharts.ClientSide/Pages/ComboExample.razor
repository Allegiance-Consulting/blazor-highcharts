@page "/combo-chart"
@inject IChartService chartService
@inject IJSRuntime jsRuntime
<h3>Combo Example</h3>

<div id="combo-chart"></div>

<h4>Code Example</h4>
<pre class="prettyprint opacity-load">
@@code {
    public static string primaryRed = "red";
    public static string primary5 = "cadetblue";

    private ChartObject ComboChart = new ChartObject()
    {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Combo Chart"),
        XAxis = new XAxis()
        {
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List&lt;Line>()
        {
                new Line()
                {
                Color = primaryRed,
                DashStyle = DashStyle.Longdashdot,
                Value = 7,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "&lt;span style=\"font-weight: normal; color: " + primaryRed + " ; font-size: 14px; letter-spacing: normal;\">Plot Line&lt;/span>"
                },
                Id = "PlotLine"
                }
            }
        },
        Tooltip = new Tooltip()
        {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
        },
        PlotOptions = new PlotOptions()
        {
            Area = new Area()
            {
                Stacking = Stacking.Normal
            },
            Line = new Line()
            {
                Marker = new Marker(false)
            },
            Series = new PlotOptionsSeries()
            {
                Label = new Label() { Enabled = false },
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
            }
        },

        Series = new List&lt;SeriesElement>()
    {
            new SeriesElement()
            {
                Name= "Area",
                Data= new List&lt;object>() { 5371268, 5316387, 5261641, 5207028, 5152546, 5098196, 5043975, 4989882, 4935917, 4882077, 4828362, 4774769 },
                Color= primary5,
                Marker=new Marker(false)
            },
            new SeriesElement()
            {
                Type= "spline",
                Name= "Spline",
                Data= new List&lt;object>() { 2400019, 2388393, 2376824, 2365311, 2353853, 2342451, 2331105, 2319813, 2308576, 2297393, 2286264, 2275190 },
                LineWidth= 3,
                LineColor= primaryRed,
                Color= primaryRed,
                Marker=new Marker()
                {
                    LineWidth= 3,
                    LineColor= primaryRed,
                    FillColor= "black"
                },
            }
        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons()
            {
                ContextButton = new ContextButton(false)
            },
            SourceWidth = 900,
            SourceHeight = 350,
            ChartOptions = new ChartOptions()
            {
                Subtitle = null
            }
        }

    };


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("combo-chart", ComboChart.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
</pre>

@code {
    public static string primaryRed = "red";
    public static string primary5 = "cadetblue";

    private ChartObject ComboChart = new ChartObject()
    {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Combo Chart"),
        XAxis = new XAxis()
        {
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List<Line>()
        {
                new Line()
                {
                Color = primaryRed,
                DashStyle = DashStyle.Longdashdot,
                Value = 7,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "<span style=\"font-weight: normal; color: " + primaryRed + "; font-size: 14px; letter-spacing: normal;\">Plot Line</span>"
                },
                Id = "PlotLine"
                }
            }
        },
        Tooltip = new Tooltip()
        {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
        },
        PlotOptions = new PlotOptions()
        {
            Area = new Area()
            {
                Stacking = Stacking.Normal
            },
            Line = new Line()
            {
                Marker = new Marker(false)
            },
            Series = new PlotOptionsSeries()
            {
                Label = new Label() { Enabled = false },
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
            }
        },

        Series = new List<SeriesElement>()
    {
            new SeriesElement()
            {
                Name= "Area",
                Data= new List<object>() { 5371268, 5316387, 5261641, 5207028, 5152546, 5098196, 5043975, 4989882, 4935917, 4882077, 4828362, 4774769 },
                Color= primary5,
                Marker=new Marker(false)
            },
            new SeriesElement()
            {
                Type= "spline",
                Name= "Spline",
                Data= new List<object>() { 2400019, 2388393, 2376824, 2365311, 2353853, 2342451, 2331105, 2319813, 2308576, 2297393, 2286264, 2275190 },
                LineWidth= 3,
                LineColor= primaryRed,
                Color= primaryRed,
                Marker=new Marker()
                {
                    LineWidth= 3,
                    LineColor= primaryRed,
                    FillColor= "black"
                },
            }
        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons()
            {
                ContextButton = new ContextButton(false)
            },
            SourceWidth = 900,
            SourceHeight = 350,
            ChartOptions = new ChartOptions()
            {
                Subtitle = null
            }
        }

    };


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("combo-chart", ComboChart.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
