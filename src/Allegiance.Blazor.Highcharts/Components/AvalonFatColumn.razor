@inject IChartService chartService
@inject IJSRuntime jsRuntime



<div id="avalondoublecolumn-@uniqueID"></div>



@code {

    [Parameter]
    public string uniqueID { get; set; } = "demo";
    [Parameter]
    public List<object> data { get; set; } = null;
    [Parameter]
    public bool? styled { get; set; } = false;
    [Parameter]
    public string titleText { get; set; } = "";
    [Parameter]
    public string xAxisTitleText { get; set; } = "";
    [Parameter]
    public string yAxisTitleText { get; set; } = "";
    [Parameter]
    public bool? legendEnabled { get; set; } = false;
    [Parameter]
    public int? borderRadius { get; set; } = 5;
    [Parameter]
    public int? pointWidth { get; set; } = null;
    [Parameter]
    public bool tooltipEnabled { get; set; } = false;
    [Parameter]
    public bool exportEnabled { get; set; } = false;
    [Parameter]
    public int? exportingSourceWidth { get; set; } = 500;
    [Parameter]
    public int? exportingSourceHeight { get; set; } = 350;
    [Parameter]
    public string xAxisLineColor { get; set; }
    [Parameter]
    public int? xAxisLineWidth { get; set; }
    [Parameter]
    public string yAxisGridLineColor { get; set; }
    [Parameter]
    public int? yAxisGridLineWidth { get; set; }
    [Parameter]
    public int? ChartHeight { get; set; }
    [Parameter]
    public int? ChartWidth { get; set; }
    [Parameter]
    public List<long> chartSpacing { get; set; } = new List<long>() { 10, 10, 15, 10 };
    [Parameter]
    public List<long> chartMargin { get; set; } = null;
    [Parameter]
    public string seriesName { get; set; } = null;
    [Parameter]
    public bool? colorByPoint { get; set; } = false;
    [Parameter]
    public Style xAxisLabelsStyle { get; set; } = new Style()
        {
        FontWeight = "bold",
        FontSize = "18px",
        FontFamily = "Roboto"
        };


    private ChartObject DoubleColumn = new ChartObject();

    public void SetGraphParameters()
        {
        DoubleColumn.Chart.Type = ChartType.Column;
        DoubleColumn.Chart.StyledMode = styled;
        DoubleColumn.Chart.Spacing = chartSpacing;
        DoubleColumn.Chart.Margin = chartMargin;
        DoubleColumn.Credits.Enabled = false;
        DoubleColumn.Title.Text = titleText;
        DoubleColumn.XAxis.Type = AxisType.Category;
        DoubleColumn.XAxis.Labels = new Labels() { Style = xAxisLabelsStyle };

        DoubleColumn.XAxis.LineColor = xAxisLineColor;
        DoubleColumn.XAxis.LineWidth = xAxisLineWidth;

        DoubleColumn.YAxis.GridLineColor = yAxisGridLineColor;
        DoubleColumn.YAxis.GridLineWidth = yAxisGridLineWidth;

        DoubleColumn.Chart.Height = ChartHeight;
        DoubleColumn.Chart.Width = ChartWidth;


        DoubleColumn.YAxis.Title.Text = yAxisTitleText;
        DoubleColumn.Legend.Enabled = legendEnabled;
        DoubleColumn.PlotOptions.Column = new PlotOptionsColumn(borderRadius);
        DoubleColumn.PlotOptions.Series.PointWidth = pointWidth;
        DoubleColumn.Tooltip.Enabled = tooltipEnabled;
        DoubleColumn.Series = new List<SeriesElement>()
        {
            new SeriesElement()
            {
                Name = seriesName,
                ColorByPoint = colorByPoint,
                Data = data
            }
        };
        DoubleColumn.Exporting.Buttons = new Buttons(exportEnabled);
        DoubleColumn.Exporting.SourceWidth = exportingSourceWidth;
        DoubleColumn.Exporting.SourceHeight = exportingSourceHeight;
        DoubleColumn.Exporting.ChartOptions = new ChartOptions();

        }

    protected override void OnAfterRender(bool firstRender)
        {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("avalondoublecolumn-" + uniqueID, DoubleColumn.Generate());
        }

    protected override void OnParametersSet()
        {
        base.OnParametersSet();
        SetGraphParameters();

        }

}
