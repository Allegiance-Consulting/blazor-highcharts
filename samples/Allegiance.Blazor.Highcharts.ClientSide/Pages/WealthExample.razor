@page "/wealth-chart"
@inject IChartService chartService
@inject IJSRuntime jsRuntime
@using Allegiance.Blazor.Highcharts.ClientSide.DataConstants
<h3>WealthExample</h3>

<div id="wealth"></div>

@code {

    public static string primaryRed = "#ea6868";//ea6868
    public static string primary5 = "#6eb3ed";//2f7cc0
    public static string primary4 = "#588dcc";//61c4b1
    public static string primary3 = "#4067a0";//fbaf5f
    public static string primary2 = "#61c4b1";//ea6868
    public static string primary1 = "#2ea08a";//604760

    private ChartObject WealthMap = new ChartObject()
    {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Wealth Map"),
        XAxis = new XAxis()
        {
            TickPositions = DummyData.Ticks,
            Categories = DummyData.Categories.ConvertAll<string>(x => x.ToString()),
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List<Line>()
            {
                new Line()
                {
                Color = "primaryRed",
                DashStyle = DashStyle.Longdashdot,
                Value = 446,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "<span style=\"font-weight: normal; color: " + primaryRed + "; font-size: 14px; letter-spacing: normal;\">Retirement</span>"
                    //Text = "Retirement"
                },
                Id = "OverviewRetirementLine"
                }
            }
        },
        Tooltip = new Tooltip()
        {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
        },
        PlotOptions = new PlotOptions()
        {
            Area = new Area()
            {
                Stacking = Stacking.Normal
            },
            Line = new Line()
            {
                Marker = new Marker(false)
            },
            Series = new PlotOptionsSeries()
            {
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
            }
        },


        Series = new List<SeriesElement>()
        {
            new SeriesElement("USA", new List<object>()
            {
                null, null, null, null, null, 6, 11, 32, 110, 235,
                369, 640, 1005, 1436, 2063, 3057, 4618, 6444, 9822, 15468,
                20434, 24126, 27387, 29459, 31056, 31982, 32040, 31233, 29224, 27342,
                26662, 26956, 27912, 28999, 28965, 27826, 25579, 25722, 24826, 24605,
                24304, 23464, 23708, 24099, 24357, 24237, 24401, 24344, 23586, 22380,
                21004, 17287, 14747, 13076, 12555, 12144, 11009, 10950, 10871, 10824,
                10577, 10527, 10475, 10421, 10358, 10295, 10104, 9914, 9620, 9326,
                5113, 5113, 4954, 4804, 4761, 4717, 4368, 4018
            }),
            new SeriesElement("USSR/Russia", new List<object>()
            {
                null, null, null, null, null, null, null, null, null, null,
                5, 25, 50, 120, 150, 200, 426, 660, 869, 1060,
                1605, 2471, 3322, 4238, 5221, 6129, 7089, 8339, 9399, 10538,
                11643, 13092, 14478, 15915, 17385, 19055, 21205, 23044, 25393, 27935,
                30062, 32049, 33952, 35804, 37431, 39197, 45000, 43000, 41000, 39000,
                37000, 35000, 33000, 31000, 29000, 27000, 25000, 24000, 23000, 22000,
                21000, 20000, 19000, 18000, 18000, 17000, 16000, 15537, 14162, 12787,
                12600, 11400, 5500, 4512, 4502, 4502, 4500, 4500
            })
        },

        //Series = new List<SeriesElement>
        //{
        //    new SeriesElement()
        //    {
        //    Name= "Lifestyle Assets ",
        //    Data=  DummyData.LifeStyle,

        //    Color= primary5,
        //    Marker=new Marker(false)
        //    },
        //    new SeriesElement()
        //    {
        //        Name= "Retirement Assets ",
        //        Data= DummyData.Retirement,
        //        Color= primary4,
        //        Marker= new Marker(false)
        //    },
        //    new SeriesElement()
        //    {
        //        Name= "Discretionary Assets ",
        //        Data=  DummyData.Discretionary ,
        //        Color= primary3,
        //        Marker= new Marker(false)
        //    },
        //    new SeriesElement()
        //    {
        //        Name= "Business Assets",
        //        Data= DummyData.Businessasset,
        //        Color= primary2,
        //        Marker= new Marker(false)
        //    },
        //    new SeriesElement()
        //    {
        //        Name= "Property",
        //        Data= DummyData.Property,
        //        Color= primary1,
        //        Marker= new Marker(false)
        //    },
        //    new SeriesElement()
        //    {
        //        Type= "spline",
        //        Name= "Debt",
        //        Data= DummyData.Debt ,
        //        LineWidth= 3,
        //        LineColor= primaryRed,
        //        Color= primaryRed,
        //        Marker=new Marker()
        //        {
        //        LineWidth= 3,
        //        LineColor= primaryRed,
        //        FillColor= "#4c4c4c"
        //        }
        //    }
        //}
        ////Exporting


    };


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("wealth", WealthMap.Generate());
        //jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
