@page "/wealth-chart"
@inject IChartService chartService
@inject IJSRuntime jsRuntime
@using Allegiance.Blazor.Highcharts.ClientSide.DataConstants
<h3>WealthExample</h3>

<div id="wealth"></div>

<h4>Code Example</h4>
<pre class="prettyprint opacity-load">
@@code {
    public static string primaryRed = "red";
    public static string primary5 = "cadetblue";
    public static string primary4 = "blueviolet";
    public static string primary3 = "aquamarine";
    public static string primary2 = "aqua";
    public static string primary1 = "powderblue";

    private ChartObject WealthMap = new ChartObject()
    {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Wealth Map"),
        XAxis = new XAxis()
        {
            TickPositions = DummyDataWealth.Ticks,
            Categories = DummyDataWealth.Categories.ConvertAll=&lt;string>(x => x.ToString()),
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List=&lt;Line>()
        {
                new Line()
                {
                Color = primaryRed,
                DashStyle = DashStyle.Longdashdot,
                Value = 446,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "=&lt;span style=\"font-weight: normal; color: " + primaryRed + " ; font-size: 14px; letter-spacing: normal;\">Retirement=&lt;/span>"
                },
                Id = "OverviewRetirementLine"
                }
            }
        },
        Tooltip = new Tooltip()
        {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
        },
        PlotOptions = new PlotOptions()
        {
            Area = new Area()
            {
                Stacking = Stacking.Normal
            },
            Line = new Line()
            {
                Marker = new Marker(false)
            },
            Series = new PlotOptionsSeries()
            {
                Label = new Label() { Enabled = false },
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
            }
        },

        Series = new List=&lt;SeriesElement>
    {
            new SeriesElement()
            {
            Name= "Lifestyle Assets ",
            Data=  DummyDataWealth.LifeStyle,

            Color= primary5,
            Marker=new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Retirement Assets ",
                Data= DummyDataWealth.Retirement,
                Color= primary4,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Discretionary Assets ",
                Data=  DummyDataWealth.Discretionary ,
                Color= primary3,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Business Assets",
                Data= DummyDataWealth.Businessasset,
                Color= primary2,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Property",
                Data= DummyDataWealth.Property,
                Color= primary1,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Type= "spline",
                Name= "Debt",
                Data= DummyDataWealth.Debt ,
                LineWidth= 3,
                LineColor= primaryRed,
                Color= primaryRed,
                Marker=new Marker()
                {
                LineWidth= 3,
                LineColor= primaryRed,
                FillColor= "black"
                }
            }
        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons()
            {
                ContextButton = new ContextButton(false)
            },
            SourceWidth = 900,
            SourceHeight = 350,
            ChartOptions = new ChartOptions()
            {
                Subtitle = null
            }
        }

    };


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("wealth", WealthMap.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
</pre>

@code {
    public static string primaryRed = "red";
    public static string primary5 = "cadetblue";
    public static string primary4 = "blueviolet";
    public static string primary3 = "aquamarine";
    public static string primary2 = "aqua";
    public static string primary1 = "powderblue";

    private ChartObject WealthMap = new ChartObject()
    {
        Chart = new Chart(ChartType.Area),
        Credits = new Credits(false),
        Title = new Title("Wealth Map"),
        XAxis = new XAxis()
        {
            TickPositions = DummyDataWealth.Ticks,
            Categories = DummyDataWealth.Categories.ConvertAll<string>(x => x.ToString()),
            TickmarkPlacement = TickmarkPlacement.On,
            Title = new Title(false),
            PlotLines = new List<Line>()
        {
                new Line()
                {
                Color = primaryRed,
                DashStyle = DashStyle.Longdashdot,
                Value = 446,
                Width = 1,
                ZIndex = 5,
                Label = new Label()
                {
                    Align = Align.Left,
                    Text = "<span style=\"font-weight: normal; color: " + primaryRed + "; font-size: 14px; letter-spacing: normal;\">Retirement</span>"
                },
                Id = "OverviewRetirementLine"
                }
            }
        },
        Tooltip = new Tooltip()
        {
            ValuePrefix = "R",
            Split = true,
            Distance = 50,
            Padding = 2,
        },
        PlotOptions = new PlotOptions()
        {
            Area = new Area()
            {
                Stacking = Stacking.Normal
            },
            Line = new Line()
            {
                Marker = new Marker(false)
            },
            Series = new PlotOptionsSeries()
            {
                Label = new Label() { Enabled = false },
                FillOpacity = 0.9,
                LineWidth = 1,
                Animation = new Animation(2000),
            }
        },

        Series = new List<SeriesElement>
    {
            new SeriesElement()
            {
            Name= "Lifestyle Assets ",
            Data=  DummyDataWealth.LifeStyle,

            Color= primary5,
            Marker=new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Retirement Assets ",
                Data= DummyDataWealth.Retirement,
                Color= primary4,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Discretionary Assets ",
                Data=  DummyDataWealth.Discretionary ,
                Color= primary3,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Business Assets",
                Data= DummyDataWealth.Businessasset,
                Color= primary2,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Name= "Property",
                Data= DummyDataWealth.Property,
                Color= primary1,
                Marker= new Marker(false)
            },
            new SeriesElement()
            {
                Type= "spline",
                Name= "Debt",
                Data= DummyDataWealth.Debt ,
                LineWidth= 3,
                LineColor= primaryRed,
                Color= primaryRed,
                Marker=new Marker()
                {
                LineWidth= 3,
                LineColor= primaryRed,
                FillColor= "black"
                }
            }
        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons()
            {
                ContextButton = new ContextButton(false)
            },
            SourceWidth = 900,
            SourceHeight = 350,
            ChartOptions = new ChartOptions()
            {
                Subtitle = null
            }
        }

    };


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("wealth", WealthMap.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

}
