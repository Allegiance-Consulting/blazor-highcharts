@inject IChartService chartService
@inject IJSRuntime jsRuntime


<div id="avaloncombochart-@uniqueID"></div>


@code {

    [Parameter]
    public string uniqueID { get; set; } = "demo";

    [Parameter]
    public XAxis xAxis { get; set; } = null;
    [Parameter]
    public YAxis yAxis { get; set; } = null;

    [Parameter]
    public string titleText { get; set; } = "";
    [Parameter]
    public string tooltipValuePrefix { get; set; } = "R";
    [Parameter]
    public bool? tooltipSplit { get; set; } = true;
    [Parameter]
    public Tooltip tooltip { get; set; } = null;
    [Parameter]
    public List<PlotLine> xAxisPlotLines { get; set; }
    [Parameter]
    public List<object> xAxisCategories { get; set; }
    [Parameter]
    public List<long?> xAxisTickPositions { get; set; }
    [Parameter]
    public List<PlotLine> yAxisPlotLines { get; set; }

    [Parameter]
    public PlotOptions plotOptions { get; set; } = null;

    [Parameter]
    public List<SeriesElement> series { get; set; } = null;


    [Parameter]
    public bool exportEnabled { get; set; } = false;
    [Parameter]
    public int? exportingSourceWidth { get; set; } = 900;
    [Parameter]
    public int? exportingSourceHeight { get; set; } = 350;

    private ChartObject ComboChart = new ChartObject();
    public void SetGraphParameters()
    {
        ComboChart.Credits.Enabled = false;
        ComboChart.Title = new Title(titleText);
        if ( xAxis == null)
        {
            ComboChart.XAxis = new XAxis()
            {
                TickmarkPlacement = TickmarkPlacement.On,
                Title = new Title(false),
                PlotLines = xAxisPlotLines,
                Categories = xAxisCategories,
                TickPositions = xAxisTickPositions
            };
        }

        if (yAxis ==  null)
        {
            ComboChart.YAxis = new YAxis()
            {
                Title = new Title(false)
            };
        }



        if (tooltip == null)
        {
            ComboChart.Tooltip = new Tooltip()
            {
                ValuePrefix = tooltipValuePrefix,
                Split = tooltipSplit,
                Distance = 50,
                Padding = 2,
            };
        }
        if (plotOptions == null)
        {
            ComboChart.PlotOptions = new PlotOptions()
            {
                Area = new PlotOptionsArea()
                {
                    Stacking = Stacking.Normal
                },
                Series = new PlotOptionsSeries()
                {
                    Label = new Label() { Enabled = false },
                    FillOpacity = 0.9,
                    LineWidth = 1,
                    Animation = new Animation(2000),
                }
            };
        }
        else { ComboChart.PlotOptions = plotOptions; }

        ComboChart.Series = series;
        ComboChart.Exporting.Buttons = new Buttons(exportEnabled);
        ComboChart.Exporting.SourceWidth = exportingSourceWidth;
        ComboChart.Exporting.SourceHeight = exportingSourceHeight;
        ComboChart.Exporting.ChartOptions = new ChartOptions();
    }


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("avaloncombochart-" + uniqueID, ComboChart.Generate());
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SetGraphParameters();

    }


}
