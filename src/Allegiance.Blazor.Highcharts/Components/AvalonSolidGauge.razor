@inject IChartService chartService
@inject IJSRuntime jsRuntime

<div id="solidgauge-@uniqueID"></div>


@code {

    [Parameter]
    public long? displayVal { get; set; } = 0;
    [Parameter]
    public string chartHeight { get; set; } = "100";
    [Parameter]
    public string uniqueID { get; set; } = "demo";

    private ChartObject SolidGauge = new ChartObject()
    {
        Chart = new Chart()
        {
            StyledMode = false,
            Type = ChartType.SolidGauge,
            Height = "100",
            Width = "100",
            Spacing = new List<long>() { 0, 0, 0, 0 },
            Margin = new List<long>() { 0, 0, 0, 0 },
            BackgroundColor = null,
            Animation = new Animation(2000)

        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons(false)
        },
        Legend = new Legend(true),
        Credits = new Credits(false),
        Title = new Title()
        {
            Text = "",
            Align = Align.Center,
            VerticalAlign = VerticalAlign.Middle,
            Floating = true,
            Style = new Style()
            {
                Color = "#666",
                FontWeight = "bold",
                FontSize = "24px",
               //FontFamily = "Roboto"
                FontFamily = "initial"
            },
            Y = 20
        },
        Pane = new Pane()
        {
            StartAngle = 0,
            EndAngle = 360,
            Size = "100%",
            Center = new List<string>() { "50%", "50%" },
            Background = new List<Background>()
            {
               new Background()
               {
                   BackgroundColor = "#EBEBEB",
                   OuterRadius = "100%",
                   InnerRadius = "90%",
                   BorderWidth = 0,
                   Shape = BackgroundShape.Circle

               }
            }

        },
        YAxis = new YAxis()
        {
            Min = 0,
            Max = 100,
            LineWidth = 0,
            TickPositions = new List<object>(),
        },
        PlotOptions = new PlotOptions()
        {
            Series = new PlotOptionsSeries()
            {
                Animation = new Animation(2000)
            },
            Solidgauge = new Solidgauge()
            {
                DataLabels = new Labels(false),
                StickyTracking = false,
                Rounded = true
            }
        },
        Tooltip = new Tooltip()
        {
            Enabled = false
        }
    };

    public string SetColor( long? myval)
    {
        if ( myval < 50)
        {
            return "#ea6868";
        }
        else if ( myval < 70)
        {
            return "#fbaf5f";
        }
        else
        {
            return "#5bc9b3";
        }
    }

    public void UpdateGraph( long? myval )
    {
        string colorstring = SetColor(myval);
        
        SolidGauge.Chart.Height = chartHeight;
        SolidGauge.Chart.Width = chartHeight;
        SolidGauge.Title.Style.Color = colorstring;
        SolidGauge.Title.Text = myval.ToString() + "%";
        SolidGauge.Series = new List<SeriesElement>()
        {
            new SeriesElement()
            {
                Name = "Hit Rate",
                Data = new List<object>()
                {
                    new Datum()
                    {
                        Color = colorstring,
                        Radius = "100%",
                        InnerRadius = "90%",
                        Y = myval,
                        BorderRadius = "10px"
                    }
                }
            }

        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("solidgauge-" + uniqueID, SolidGauge.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateGraph(displayVal);

    }

}
