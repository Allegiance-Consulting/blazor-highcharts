@page "/doughnut-gauge"
@inject IChartService chartService
@inject IJSRuntime jsRuntime

<h3>Solid Gauge</h3>

<figure class="highcharts-figure" style="width: 600px">
    <div id="doughnutgauge"></div>
</figure>


<h4>Code Example</h4>
<pre class="prettyprint opacity-load">
@@page &quot;/doughnut-gauge&quot;
@@inject IChartService chartService
@@inject IJSRuntime jsRuntime

&lt;h3>Solid Gauge&lt;/h3>

&lt;figure class=&quot;highcharts-figure&quot; style=&quot;width: 600px&quot;>
&lt;div id=&quot;doughnutgauge&quot;>&lt;/div>
&lt;/figure>
@@code {
    private ChartObject SolidGauge = new ChartObject()
    {
        Chart = new Chart()
        {
            StyledMode = false,
            Type = ChartType.SolidGauge,
            Width = 250,
            Height = 250,
            Spacing = new List&lt;int?>() { 0, 0, 0, 0 },
            Margin = new List&lt;int?>() { 0, 0, 0, 0 },
            BackgroundColor = null,
            Animation = new Animation(2000)

        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons(false)
        },
        Legend = new Legend(true),
        Credits = new Credits(false),
        Title = new Title()
        {
            Text = &quot;Solidness&quot;,
            VerticalAlign = VerticalAlign.Middle,
            Floating = true,
            Style = new Style()
            {
                Color = &quot;#666&quot;,
                FontWeight = &quot;bold&quot;,
                FontSize = &quot;24px&quot;,
                FontFamily = &quot;Roboto&quot;
            },
            Y = 9
        },
        Pane = new Pane()
        {
            StartAngle = -90,
            EndAngle = 90,
            Center = new List&lt;string>() {&quot;50%&quot;,&quot;50%&quot; },
            Background = new List&lt;Background>()
            {
               new Background()
               {
                   BackgroundColor = &quot;#EBEBEB&quot;,
                   OuterRadius = &quot;100%&quot;,
                   InnerRadius = &quot;60%&quot;,
                   BorderWidth = 0,
                   Shape = BackgroundShape.Arc

               }
            }

        },
        YAxis = new YAxis()
        {
            Min = 0,
            Max = 100,
            LineWidth = 0,
            TickPositions = new List&lt;object>(),
            Stops = new List&lt;object>()
            {
                new List&lt;object>(){0.1, &quot;#ea6868&quot;},
                new List&lt;object>(){0.49, &quot;#ea6868&quot;},
                new List&lt;object>(){0.5, &quot;#fbaf5f&quot;},
                new List&lt;object>(){0.69, &quot;#fbaf5f&quot;},
                new List&lt;object>(){0.7, &quot;#5bc9b3&quot;}
            }
        },
        PlotOptions = new PlotOptions()
        {
            Series = new PlotOptionsSeries()
            {
                Animation = new Animation(2000)
            },
            Solidgauge = new PlotOptionsSolidgauge()
            {
                DataLabels = new Labels(false),
                StickyTracking = false,
                Rounded = true
            }
        },
        Tooltip = new Tooltip()
        {
            Enabled = false
        },
        Series = new List&lt;SeriesElement>()
        {
            new SeriesElement()
            {
                Name = &quot;Hit Rate&quot;,
                Data = new List&lt;object>()
                {
                    new Datum()
                    {
                        Radius = &quot;100%&quot;,
                        InnerRadius = &quot;90%&quot;,
                        Y = 25
                    },
                    new Datum()
                    {
                        Radius = &quot;90%&quot;,
                        InnerRadius = &quot;80%&quot;,
                        Y = 50
                    },
                    new Datum()
                    {
                        Radius = &quot;80%&quot;,
                        InnerRadius = &quot;70%&quot;,
                        Y = 75
                    },
                    new Datum()
                    {
                        Radius = &quot;70%&quot;,
                        InnerRadius = &quot;60%&quot;,
                        Y = 100,                      
                    }
                }
            }
        }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart(&quot;doughnutgauge&quot;, SolidGauge.Generate());
    }
}


</pre>

@code {
    private ChartObject SolidGauge = new ChartObject()
    {
        Chart = new Chart()
        {
            StyledMode = false,
            Type = ChartType.SolidGauge,
            Width = 250,
            Height = 250,
            Spacing = new List<int?>() { 0, 0, 0, 0 },
            Margin = new List<int?>() { 0, 0, 0, 0 },
            BackgroundColor = null,
            Animation = new Animation(2000)

        },
        Exporting = new Exporting()
        {
            Buttons = new Buttons(false)
        },
        Legend = new Legend(true),
        Credits = new Credits(false),
        Title = new Title()
        {
            Text = "Solidness",
            VerticalAlign = VerticalAlign.Middle,
            Floating = true,
            Style = new Style()
            {
                Color = "#666",
                FontWeight = "bold",
                FontSize = "24px",
                FontFamily = "Roboto"
            },
            Y = 9
        },
        Pane = new Pane()
        {
            StartAngle = -90,
            EndAngle = 90,
            Center = new List<string>() {"50%","50%" },
            Background = new List<Background>()
            {
               new Background()
               {
                   BackgroundColor = "#EBEBEB",
                   OuterRadius = "100%",
                   InnerRadius = "60%",
                   BorderWidth = 0,
                   Shape = BackgroundShape.Arc

               }
            }

        },
        YAxis = new YAxis()
        {
            Min = 0,
            Max = 100,
            LineWidth = 0,
            TickPositions = new List<object>(),
            Stops = new List<object>()
            {
                new List<object>(){0.1, "#ea6868"},
                new List<object>(){0.49, "#ea6868"},
                new List<object>(){0.5, "#fbaf5f"},
                new List<object>(){0.69, "#fbaf5f"},
                new List<object>(){0.7, "#5bc9b3"}
            }
        },
        PlotOptions = new PlotOptions()
        {
            Series = new PlotOptionsSeries()
            {
                Animation = new Animation(2000)
            },
            Solidgauge = new PlotOptionsSolidgauge()
            {
                DataLabels = new Labels(false),
                StickyTracking = false,
                Rounded = true
            }
        },
        Tooltip = new Tooltip()
        {
            Enabled = false
        },
        Series = new List<SeriesElement>()
        {
            new SeriesElement()
            {
                Name = "Hit Rate",
                Data = new List<object?>()
                {
                    new Datum()
                    {
                        Radius = "100%",
                        InnerRadius = "90%",
                        Y = 25
                    },
                    new Datum()
                    {
                        Radius = "90%",
                        InnerRadius = "80%",
                        Y = 50
                    },
                    new Datum()
                    {
                        Radius = "80%",
                        InnerRadius = "70%",
                        Y = 75
                    },
                    new Datum()
                    {
                        Radius = "70%",
                        InnerRadius = "60%",
                        Y = 100,                      
                    }
                }
            }
        }
    };

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        chartService.RenderChart("doughnutgauge", SolidGauge.Generate());
        jsRuntime.InvokeVoidAsync("prettyPrint");
    }
}
